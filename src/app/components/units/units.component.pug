doctype html
svg:g([attr.class]="getThemeClassName()")
  svg:g.tophatch
    svg:line.hatch(*ngFor="let line of lines", [attr.x1]="line.x1", [attr.y1]="line.y1", [attr.x2]="line.x2", [attr.y2]="line.y2", [attr.style]="getHatchStyle(unit.hatchStyle)")
  svg:g.bottomhatch(*ngIf="rulerService.rulerType == 1")
    svg:line.hatch(*ngFor="let line of mirroredLines", [attr.x1]="line.x1", [attr.y1]="line.y1", [attr.x2]="line.x2", [attr.y2]="line.y2", [attr.style]="getHatchStyle(unit.hatchStyle)")
  svg:g.units(*ngIf="unit.showUnits")
    svg:g.hunits(*ngIf="isHorizontal()")
      svg:text.unit(#unit, *ngFor="let line of lines", text-anchor="left", [attr.style]="getTitleTranslation(line.x1, unit)", (mouseenter)="unitMouseEnter($event, unit)", (mouseout)="unitMouseLeave($event, unit)")
        svg:tspan {{formatTitle(line.x1)}}
    svg:g.vunits(*ngIf="!isHorizontal()")
      svg:text.unit(#unit, *ngFor="let line of lines", text-anchor="left", [attr.style]="getMultiLineTitleTranslation(line.y1, unit)")
        svg:tspan(*ngFor="let splitLine of generateVerticalText(line.y1); let i = index", x="0", [attr.y]="calcMultiTitleY(i, line.y1)") {{splitLine}}
